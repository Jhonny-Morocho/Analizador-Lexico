/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package analizadorlexico;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jhonn
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        btnSubmit = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtInput = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableData = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        txtInput.setColumns(20);
        txtInput.setRows(5);
        jScrollPane2.setViewportView(txtInput);

        tableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Token", "Lexema", "Linea", "Columna"
            }
        ));
        jScrollPane3.setViewportView(tableData);

        jButton1.setText("Limipiar Tabla");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 605, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(249, 249, 249)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(216, 216, 216)
                                .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(153, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        // tabla tableData
        DefaultTableModel modelo=(DefaultTableModel)tableData.getModel();
        
        File archivoGenerado=new File("log.txt");
        PrintWriter escrbir;
        try {
            escrbir= new PrintWriter(archivoGenerado);
            escrbir.print(txtInput.getText());// obtenemos el texto del input
            System.out.println(txtInput.getText());
            escrbir.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            //utilizamos el analizador lexico
            Reader lector= new BufferedReader(new FileReader("log.txt"));
            Lexer lexer=new Lexer(lector);
            String strResultadoCadena="";
            int contador=1;
            while (true) {   
                
                Tokens tokens= lexer.yylex();
                
                // sinno encuentra nada en el archivo
                if(tokens==null){
                    strResultadoCadena+="\n FIN";
                    String[] fila={Integer.toString(contador),"FIN","FIN","FIN","FIN"};
                    modelo.addRow(fila);
                  //  txtResultado.setText(strResultadoCadena);// imprimir en el tex area
                    return;
                }
                
                switch(tokens){
                    case ERROR:
                       String[] filaError={
                                           Integer.toString(contador),
                                           "NO DEFINIDO",
                                           "NO DEFINIDO",
                                           "NO DEFINIDO",
                                           "NO DEFINIDO"
                                           };
                       modelo.addRow(filaError);
                        break;
                    case Identificador: 
                        String[] filaIdentificador={
                                                        Integer.toString(contador),
                                                        tokens.toString(),
                                                        lexer.lexeme,
                                                        Integer.toString(lexer.numLinea),
                                                        Integer.toString(lexer.numColumna),
                                                    };
                        modelo.addRow(filaIdentificador);
               
                        break;
                    
                    case Numero: 
                        String[] filaNumero={
                                                Integer.toString(contador),
                                                tokens.toString(),
                                                lexer.lexeme,
                                                Integer.toString(lexer.numLinea),
                                                Integer.toString(lexer.numColumna),
                                            };
                        modelo.addRow(filaNumero);
                      
                        break;
                    
                    case Reservadas:
                        String[] filaReservadas={
                                                    Integer.toString(contador),
                                                    tokens.toString(),
                                                    lexer.lexeme,
                                                    Integer.toString(lexer.numLinea),
                                                    Integer.toString(lexer.numColumna),
                                                };
                         modelo.addRow(filaReservadas);
                        
                        break;
                        
                    case Suma: case Resta: case Multiplicacion: case Igual: 
                    case Division: case Coma: 
                    case DelimitadorParenIz: case DelimitadorParenId: 
                    case DelimitadorIz: case DelimitadorId: 
                       
                    
                        String[] filaOperador={
                                                    Integer.toString(contador),
                                                    tokens.toString(),
                                                    lexer.yytext(),
                                                    Integer.toString(lexer.numLinea),
                                                    Integer.toString(lexer.numColumna),
                                                };
                        modelo.addRow(filaOperador);
        
                        break;
                        
                    default:
                        System.err.println("POR DEFAULT");
//                        strResultadoCadena+="Token : "+tokens+" \n";
//                        System.out.println(strResultadoCadena+="Token : "+tokens+" \n");
                       // String[] filadefaul={Integer.toString(contador),tokens.toString(),lexer.lexeme,Integer.toString(1),Integer.toString(1)};
                        //modelo.addRow(filadefaul);
                        break;
                   
                }
                
                System.out.println( contador++);
                System.out.println("");
              //modelo.addRow(fila);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelo=(DefaultTableModel)tableData.getModel();
        while(modelo.getRowCount()>0){
                modelo.removeRow(0);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tableData;
    private javax.swing.JTextArea txtInput;
    // End of variables declaration//GEN-END:variables
}
